---
import Stripe from "stripe";
import admin from "@/firebase/admin";
import axios from "axios";
import { getTotal } from "@/utils/cart";
import Layout from "@/layouts/Layout.astro";
import SuccessPage from "@/components/react/SuccessPage.jsx";
const stripe = new Stripe(import.meta.env.PRIVATE_STRIPE_SECRET_KEY); // Stripe instance
// Parse the URL to get the session_id
const url = new URL(Astro.url);
const searchParams = url.searchParams;
const session_id = searchParams.get("session_id") || "";

if (session_id === "") {
  return Astro.redirect("/cart"); // Redirect to cart if no session_id is provided
}

// Retrieve the checkout session from Stripe
const session = await stripe.checkout.sessions.retrieve(session_id);
console.log(session);
if (!session) {
  return Astro.redirect("/cart"); // Redirect to cart if session retrieval fails
}

const db = admin.firestore();
const checkoutRef = admin.firestore().collection("checkout").doc(session.id);
const checkoutDoc = await checkoutRef.get();
if (!checkoutDoc.exists) {
  // Proceed with the refund and redirect the user to the cart page
  try {
    await stripe.refunds.create({
      payment_intent: session.payment_intent as string,
      amount: session.amount_total,
    });
    console.log("Refund successful");
  } catch (error) {
    console.error("Error refunding payment:", error.message);
  }
  return Astro.redirect("/cart");
}
const checkoutData = checkoutDoc.data();
const checkoutProducts = checkoutData.products;
if (checkoutData.status !== "pending") {
  // Already processed or cancelled.
  // HERE WE SHOULD REDIRECT WHEN ENDED EDITING
  //return Astro.redirect("/cart");
}
// checkoutData contains the total, products, user (uid), total, status, session_id
// Stock Management will be omitted for simplicity and will proceed with the payment processing
// The payment will be saved to Firestore for future reference

// Obtain the customers current cart
const uid = session.client_reference_id;
const cartRef = admin.firestore().collection("carts").doc(`${uid}`);

const doc = await cartRef.get();
if (doc.exists) {
  const cartProductsData = doc.data();
  let cartProducts =
    cartProductsData.products !== undefined ? cartProductsData.products : {};
  // remove the products from the cart which have been paid
  for (const product in checkoutProducts) {
    if (cartProducts[product]) {
      delete cartProducts[product];
    }
  }
  console.log("Cart products after removing paid products: ", cartProducts);
  // recalculate the total
  const total = getTotal(cartProducts);
  // update the cart in the database
  await cartRef.update({
    products: cartProducts,
    total,
  });
}

if (checkoutData.total !== session.amount_subtotal) {
  console.log("El importe pagado no coincide con el importe del carrito");
  console.log("Importe pagado: ", session.amount_total / 100);
  console.log("Importe del carrito: ", checkoutData.total);
  // Aquí deberíamos proceder con la devolución del importe y redirigir al usuario a la página de carrito de nuevo
  try {
    // Asegúrate de que el payment_intent existe en la sesión
    if (session.payment_intent) {
      await stripe.refunds.create({
        payment_intent: session.payment_intent as string, // Asegura que es un string
        amount: session.amount_total, // Refund the full amount in cents
      });
      console.log("El importe ha sido reembolsado correctamente.");
    } else {
      console.error("No se encontró el payment_intent en la sesión de pago.");
    }
  } catch (error) {
    console.error("Error al procesar el reembolso: ", error.message);
  }

  return Astro.redirect("/cart");
}
const customerEmail = session.customer_email
  ? session.customer_email
  : session.customer_details.email;
await checkoutRef.update({
  status: session.payment_status,
  email: customerEmail,
});

const paymentData = {
  sessionId: session.id,
  userId: session.client_reference_id,
  amountSubtotal: session.amount_subtotal,
  amountTotal: session.amount_total,
  currency: session.currency,
  paymentStatus: session.payment_status,
  paymentIntentId: session.payment_intent,
  createdAt: new Date(session.created * 1000),
  customerEmail: customerEmail,
  customerName: session.customer_details.name,
  billingAddress: session.customer_details.address,
  shippingDetails: {
    name: session.shipping_details.name,
    address: session.shipping_details.address,
    shippingCostSubtotal: session.shipping_cost.amount_subtotal,
    shippingCostTax: session.shipping_cost.amount_tax,
    shippingCostTotal: session.shipping_cost.amount_total,
  },
  taxAmount: session.total_details.amount_tax,
  shippingOptions: session.shipping_options,
  successUrl: session.success_url,
  cancelUrl: session.cancel_url,
  products: checkoutProducts,
};
console.log("Payment data: ", paymentData);
await db.collection("payments").doc(session.id).set(paymentData);
const checkoutProductsArray = Object.keys(checkoutProducts).map((key) => {
  return {
    id: key,
    ...checkoutProducts[key],
  };
});
---

<style>
  .paymentContainer {
    padding: 2rem;
    background-color: #f8f9fa;
    border-radius: 0.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .paymentHeader {
    font-size: 1.75rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    color: #343a40;
  }

  .paymentSummary {
    background-color: #ffffff;
    border-radius: 0.5rem;
    padding: 1.5rem;
    margin-bottom: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .summaryRow {
    display: flex;
    justify-content: space-between;
    padding: 0.5rem 0;
  }

  .label {
    font-weight: 600;
    color: #495057;
  }

  .value {
    color: #343a40;
  }

  .grandTotal {
    font-size: 1.25rem;
    font-weight: 700;
    color: #e74c3c;
  }

  .productList {
    margin-top: 1.5rem;
  }

  .productItem {
    display: flex;
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #dee2e6;
  }

  .productImage {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 0.5rem;
    margin-right: 1rem;
  }

  .productInfo {
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .productName {
    font-weight: 700;
    margin-bottom: 0.5rem;
  }

  .productDescription {
    font-size: 0.875rem;
    color: #7f8c8d;
    margin-bottom: 0.5rem;
  }

  .productQuantity,
  .productPrice {
    font-size: 1rem;
    color: #2c3e50;
  }

  .orderTotals {
    margin-top: 1.5rem;
  }

  .shippingAddress {
    margin-top: 2rem;
    background-color: #f9f9f9;
    border-radius: 0.5rem;
    padding: 1.5rem;
    box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
  }

  .returnHome {
    margin-top: 2rem;
    text-align: center;
  }

  .paymentLink {
    color: #007bff;
    text-decoration: none;
    font-weight: 500;
  }

  .paymentLink:hover {
    text-decoration: underline;
  }
</style>

<Layout title="Order Completed Successfully!">
  <SuccessPage slot="main" paymentData={paymentData} client:load />
</Layout>
