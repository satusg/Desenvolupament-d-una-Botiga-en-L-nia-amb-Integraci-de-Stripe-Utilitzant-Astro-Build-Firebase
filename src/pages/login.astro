---
// Missing remove the default values form input fields
import { auth } from "@/firebase/config";
if (auth.currentUser && !auth.currentUser.isAnonymous) {
  return Astro.redirect("/");
}
import Layout from "@/layouts/Layout.astro";
---

<style>
  form {
    max-width: 400px;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin: 0 auto;
  }
  label {
    font-weight: bold;
  }
  input {
    padding: 0.5rem;
    border-radius: 0.25rem;
    border: 1px solid #ccc;
  }
  button {
    border: 1px solid rgb(18, 18, 18);
    color: rgb(18, 18, 18);
    padding: 0.5rem;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    transition: background-color 0.2s ease-in-out;
  }
  button:hover {
    background-color: rgb(18, 18, 18);
    color: #fff;
  }
  #error {
    color: red;
  }
</style>
<Layout title="Login">
  <section slot="main">
    <form action="api/login.json" method="post" id="loginForm">
      <label for="email">Email</label>
      <input
        type="email"
        name="email"
        placeholder="Email"
        value="admin@test.com"
        required
      />
      <label for="password">Password</label>
      <input
        type="password"
        name="password"
        placeholder="Password"
        value="admin@test.com"
        required
      />
      <button type="button">Login</button>
      <button
        type="button"
        onclick="window.location.href = '/loginGoogle';return false;"
      >
        Login with Google
      </button>
      <p id="error" style="display:none;"></p>
    </form>
  </section>
</Layout>
<script>
  import Axios from "axios";
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.querySelector("form");
    document.querySelector("button").addEventListener("click", async () => {
      if (form.checkValidity() === false) {
        form.reportValidity();
        return;
      }
      const formData = new FormData(form);
      const response = await Axios.post(form.action, formData);
      const data = response.data;
      if (!data || data.error) {
        if (data?.error?.field) {
          const errorField = document.querySelector(
            `[name="${data.error.field}"]`
          );
          const inputField = errorField as HTMLInputElement;
          inputField.setCustomValidity(data?.error?.message || "Invalid input");
          inputField.reportValidity();
          errorField.addEventListener("input", () => {
            inputField.setCustomValidity("");
            inputField?.removeEventListener("input", () => {});
          });
          return;
        }
        alert(
          data?.error?.message ||
            "An unexpected error has occurred, please retry later"
        );
        return;
      }
      window.location.href = "/account";
    });
  });
</script>
